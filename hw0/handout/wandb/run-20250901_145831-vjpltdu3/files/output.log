Using cuda device
Using grayscale images
Traceback (most recent call last):
  File "/zfsauton2/home/shrinivr/10-623/hw0/handout/img_classifier.py", line 200, in <module>
    main(args)
  File "/zfsauton2/home/shrinivr/10-623/hw0/handout/img_classifier.py", line 159, in main
    train_dataloader, test_dataloader = get_data(args)
                                        ^^^^^^^^^^^^^^
  File "/zfsauton2/home/shrinivr/10-623/hw0/handout/img_classifier.py", line 76, in get_data
    for X, y in train_dataloader:
                ^^^^^^^^^^^^^^^^
  File "/zfsauton2/home/shrinivr/miniconda3/envs/py312/lib/python3.12/site-packages/torch/utils/data/dataloader.py", line 734, in __next__
    data = self._next_data()
           ^^^^^^^^^^^^^^^^^
  File "/zfsauton2/home/shrinivr/miniconda3/envs/py312/lib/python3.12/site-packages/torch/utils/data/dataloader.py", line 790, in _next_data
    data = self._dataset_fetcher.fetch(index)  # may raise StopIteration
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/zfsauton2/home/shrinivr/miniconda3/envs/py312/lib/python3.12/site-packages/torch/utils/data/_utils/fetch.py", line 52, in fetch
    data = [self.dataset[idx] for idx in possibly_batched_index]
            ~~~~~~~~~~~~^^^^^
  File "/zfsauton2/home/shrinivr/10-623/hw0/handout/img_classifier.py", line 41, in __getitem__
    image = self.transform(image)
            ^^^^^^^^^^^^^^^^^^^^^
  File "/zfsauton2/home/shrinivr/miniconda3/envs/py312/lib/python3.12/site-packages/torchvision/transforms/transforms.py", line 95, in __call__
    img = t(img)
          ^^^^^^
  File "/zfsauton2/home/shrinivr/miniconda3/envs/py312/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1773, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/zfsauton2/home/shrinivr/miniconda3/envs/py312/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1784, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/zfsauton2/home/shrinivr/miniconda3/envs/py312/lib/python3.12/site-packages/torchvision/transforms/transforms.py", line 277, in forward
    return F.normalize(tensor, self.mean, self.std, self.inplace)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/zfsauton2/home/shrinivr/miniconda3/envs/py312/lib/python3.12/site-packages/torchvision/transforms/functional.py", line 350, in normalize
    return F_t.normalize(tensor, mean=mean, std=std, inplace=inplace)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/zfsauton2/home/shrinivr/miniconda3/envs/py312/lib/python3.12/site-packages/torchvision/transforms/_functional_tensor.py", line 928, in normalize
    return tensor.sub_(mean).div_(std)
           ^^^^^^^^^^^^^^^^^
RuntimeError: output with shape [1, 256, 256] doesn't match the broadcast shape [3, 256, 256]
